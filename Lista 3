{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"mount_file_id":"1X0oX-mGt8UDWOwavEmEfIzGxCBU6H96w","authorship_tag":"ABX9TyPDkUB1QBZXHdmGbJ9Y96Zl"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"8cyVYpwNM_CG","executionInfo":{"status":"ok","timestamp":1683923301763,"user_tz":180,"elapsed":1313,"user":{"displayName":"Bruna Maia","userId":"01303583052825153885"}}},"outputs":[],"source":["import numpy as np\n","from numpy import genfromtxt\n","from sklearn.tree import DecisionTreeClassifier"]},{"cell_type":"code","source":["data = genfromtxt('/content/drive/MyDrive/AM/kc2.csv', delimiter = ',')"],"metadata":{"id":"ty8S9XjINOxe","executionInfo":{"status":"ok","timestamp":1683923301764,"user_tz":180,"elapsed":17,"user":{"displayName":"Bruna Maia","userId":"01303583052825153885"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["data.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"K4f4fR35ClWR","executionInfo":{"status":"ok","timestamp":1683923301765,"user_tz":180,"elapsed":17,"user":{"displayName":"Bruna Maia","userId":"01303583052825153885"}},"outputId":"fe00e7ae-1841-4023-aa94-bea4b0f6636d"},"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(214, 22)"]},"metadata":{},"execution_count":3}]},{"cell_type":"code","source":["np.random.seed(140)"],"metadata":{"id":"DJg4sf6vNbn0","executionInfo":{"status":"ok","timestamp":1683923306502,"user_tz":180,"elapsed":4,"user":{"displayName":"Bruna Maia","userId":"01303583052825153885"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["np.random.shuffle(data)"],"metadata":{"id":"VRTE1aE1Neco","executionInfo":{"status":"ok","timestamp":1683923311542,"user_tz":180,"elapsed":3,"user":{"displayName":"Bruna Maia","userId":"01303583052825153885"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["def normalize(X_treino, X_teste):\n","\n","    Xmax = np.max(X_treino, axis = 0)\n","    Xmin = np.min(X_treino, axis = 0)\n","\n","    X_treino_normalizado = (X_treino - Xmin)/(Xmax - Xmin)\n","    X_teste_normalizado = (X_teste - Xmin)/(Xmax - Xmin)\n","\n","    return X_treino_normalizado, X_teste_normalizado"],"metadata":{"id":"L1mNfnwENfvA","executionInfo":{"status":"ok","timestamp":1683923325722,"user_tz":180,"elapsed":290,"user":{"displayName":"Bruna Maia","userId":"01303583052825153885"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["def KNN_euclidiana(X_treino, X_teste, y_treino, y_teste, k):\n","  \n","  n_treino = X_treino.shape[0]\n","  n_teste = X_teste.shape[0]\n","\n","  X_treino_normalizado, X_teste_normalizado = normalize(X_treino, X_teste)\n","\n","  y_predito = np.zeros(n_teste)\n","\n","  for i in range(n_teste):\n","    distancia_euclidiana = np.sqrt(np.sum((X_treino_normalizado - X_teste_normalizado[i])**2, axis = 1)).reshape((1, -1))[0]\n","    indices = np.argsort(distancia_euclidiana)\n","    k_vizinhos = y_treino[indices[:k]]\n","    contador_0 = np.sum(k_vizinhos == 0)\n","    contador_1 = np.sum(k_vizinhos == 1)\n","    y_predito[i] = 1 if contador_1 > contador_0 else 0\n","\n","  y_predito = np.c_[y_predito, y_teste]\n","  return y_predito"],"metadata":{"id":"ESAXry8iNwM7","executionInfo":{"status":"ok","timestamp":1683923339232,"user_tz":180,"elapsed":292,"user":{"displayName":"Bruna Maia","userId":"01303583052825153885"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["def KNN_mahalonobis(X_treino, X_teste, y_treino, y_teste, k):\n","  \n","  n_treino = X_treino.shape[0]\n","  n_teste = X_teste.shape[0]\n","\n","  X_treino_normalizado, X_teste_normalizado = normalize(X_treino, X_teste)\n","\n","  y_predito = np.zeros(n_teste)\n","\n","  cov_matrix = np.cov(X_treino_normalizado.T)\n","  cov_matrix_inv = np.linalg.inv(cov_matrix)\n","\n","  for i in range(n_teste):\n","    diff = X_treino_normalizado - X_teste_normalizado[i]\n","    distancia_mahalanobis = np.sqrt(np.sum(np.dot(diff, cov_matrix_inv) * diff, axis=1))\n","    indices = np.argsort(distancia_mahalanobis)\n","    k_vizinhos = y_treino[indices[:k]]\n","    contador_0 = np.sum(k_vizinhos == 0)\n","    contador_1 = np.sum(k_vizinhos == 1)\n","    y_predito[i] = 1 if contador_1 > contador_0 else 0\n","            \n","  y_predito = np.c_[y_predito, y_teste]\n","  return y_predito"],"metadata":{"id":"7FfsO-KVQ9Up","executionInfo":{"status":"ok","timestamp":1683923344612,"user_tz":180,"elapsed":467,"user":{"displayName":"Bruna Maia","userId":"01303583052825153885"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["k = 10\n","indices = np.arange(data.shape[0])\n","np.random.shuffle(indices)\n","fold_indices = np.array_split(indices, k)\n","\n","knn_euclidiana_1 = []\n","knn_euclidiana_5 = []\n","knn_mahalonobis_1 = []\n","knn_mahalonobis_5 = []\n","arvore_decisao = []\n","\n","for i, test_indices in enumerate(fold_indices):\n","    train_indices = np.concatenate(fold_indices[:i] + fold_indices[i+1:])\n","    X_treino = data[train_indices, :-1]\n","    X_teste = data[test_indices, :-1]\n","    y_treino = data[train_indices, -1]\n","    y_teste = data[test_indices, -1]\n","\n","    knn_euclidiana_1.append(KNN_euclidiana(X_treino, X_teste, y_treino, y_teste, k=1))\n","    knn_euclidiana_5.append(KNN_euclidiana(X_treino, X_teste, y_treino, y_teste, k=5))\n","    knn_mahalonobis_1.append(KNN_mahalonobis(X_treino, X_teste, y_treino, y_teste, k=1))\n","    knn_mahalonobis_5.append(KNN_mahalonobis(X_treino, X_teste, y_treino, y_teste, k=5))\n","\n","    tree = DecisionTreeClassifier(criterion='gini')\n","    tree.fit(X_treino, y_treino)\n","    y_pred = tree.predict(X_teste)\n","    y_true = y_teste\n","    arvore_decisao.append(np.c_[y_pred, y_true])"],"metadata":{"id":"4i9fcbvte5sS","executionInfo":{"status":"ok","timestamp":1683923416535,"user_tz":180,"elapsed":605,"user":{"displayName":"Bruna Maia","userId":"01303583052825153885"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":["for i in range(k):\n","  print(\"Fold: \", i+1)\n","  print(\"-------\")\n","\n","  knn1_e = knn_euclidiana_1[i]\n","  knn5_e = knn_euclidiana_5[i]\n","  knn1_m = knn_mahalonobis_1[i]\n","  knn5_m = knn_mahalonobis_5[i]\n","  arvore = arvore_decisao[i]\n","\n","  acuracia_knn1_e = np.sum(knn1_e[:, 0] == knn1_e[:, 1])/knn1_e.shape[0]\n","  revocacao_knn1_e = np.sum(knn1_e[knn1_e[:, 1] == 1, 0] == knn1_e[knn1_e[:, 1] == 1, 1])/knn1_e[knn1_e[:, 1] == 1].shape[0]\n","  precisao_knn1_e =  np.sum(knn1_e[knn1_e[:, 0] == 1, 0] == knn1_e[knn1_e[:, 0] == 1, 1])/knn1_e[knn1_e[:, 0] == 1].shape[0]\n","  f1_score_knn1_e = 2*np.sum(knn1_e[knn1_e[:,1] == 1, 0] == knn1_e[knn1_e[:, 1] == 1, 1])/(2*np.sum(knn1_e[knn1_e[:,1] == 1, 0] == knn1_e[knn1_e[:, 1] == 1, 1]) + np.sum(knn1_e[:, 0] != knn1_e[:, 1]))\n","\n","  print(\"KNN com k=1 e distância euclidiana:\")\n","  print(\"Acurácia: \", acuracia_knn1_e)\n","  print(\"Revocação: \", revocacao_knn1_e)\n","  print(\"Precisão: \", precisao_knn1_e)\n","  print(\"F1 Score: \", f1_score_knn1_e)\n","  print(\"\\n\")\n","\n","  acuracia_knn5_e = np.sum(knn5_e[:, 0] == knn5_e[:, 1])/knn5_e.shape[0]\n","  revocacao_knn5_e = np.sum(knn5_e[knn5_e[:, 1] == 1, 0] == knn5_e[knn5_e[:, 1] == 1, 1])/knn5_e[knn5_e[:, 1] == 1].shape[0]\n","  precisao_knn5_e = np.sum(knn5_e[knn5_e[:, 0] == 1, 0] == knn5_e[knn5_e[:, 0] == 1, 1])/knn5_e[knn5_e[:, 0] == 1].shape[0]\n","  f1_score_knn5_e = 2*np.sum(knn5_e[knn5_e[:,1] == 1, 0] == knn5_e[knn5_e[:, 1] == 1, 1])/(2*np.sum(knn5_e[knn5_e[:,1] == 1, 0] == knn5_e[knn5_e[:, 1] == 1, 1]) + np.sum(knn5_e[:, 0] != knn5_e[:, 1]))\n","\n","  print(\"KNN com k=5 e distância euclidiana:\")\n","  print(\"Acurácia: \", acuracia_knn5_e)\n","  print(\"Revocação: \", revocacao_knn5_e)\n","  print(\"Precisão: \", precisao_knn5_e)\n","  print(\"F1 Score: \", f1_score_knn5_e)\n","  print(\"\\n\")\n","\n","  acuracia_knn1_m = np.sum(knn1_m[:, 0] == knn1_m[:, 1])/knn1_m.shape[0]\n","  revocacao_knn1_m = np.sum(knn1_m[knn1_m[:, 1] == 1, 0] == knn1_m[knn1_m[:, 1] == 1, 1])/knn1_m[knn1_m[:, 1] == 1].shape[0]\n","  precisao_knn1_m =  np.sum(knn1_m[knn1_m[:, 0] == 1, 0] == knn1_m[knn1_m[:, 0] == 1, 1])/knn1_m[knn1_m[:, 0] == 1].shape[0]\n","  f1_score_knn1_m = 2*np.sum(knn1_m[knn1_m[:,1] == 1, 0] == knn1_m[knn1_m[:, 1] == 1, 1])/(2*np.sum(knn1_m[knn1_m[:,1] == 1, 0] == knn1_m[knn1_m[:, 1] == 1, 1]) + np.sum(knn1_m[:, 0] != knn1_m[:, 1]))\n","\n","  print(\"KNN com k=1 e distância mahalonobis:\")\n","  print(\"Acurácia: \", acuracia_knn1_m)\n","  print(\"Revocação: \", revocacao_knn1_m)\n","  print(\"Precisão: \", precisao_knn1_m)\n","  print(\"F1 Score: \", f1_score_knn1_m)\n","  print(\"\\n\")\n","\n","  acuracia_knn5_m = np.sum(knn5_m[:, 0] == knn5_m[:, 1])/knn5_m.shape[0]\n","  revocacao_knn5_m = np.sum(knn5_m[knn5_m[:, 1] == 1, 0] == knn5_m[knn5_m[:, 1] == 1, 1])/knn5_m[knn5_m[:, 1] == 1].shape[0]\n","  precisao_knn5_m =  np.sum(knn5_m[knn5_m[:, 0] == 1, 0] == knn5_m[knn5_m[:, 0] == 1, 1])/knn5_m[knn5_m[:, 0] == 1].shape[0]\n","  f1_score_knn5_m = 2*np.sum(knn5_m[knn5_m[:,1] == 1, 0] == knn5_m[knn5_m[:, 1] == 1, 1])/(2*np.sum(knn5_m[knn5_m[:,1] == 1, 0] == knn5_m[knn5_m[:, 1] == 1, 1]) + np.sum(knn5_m[:, 0] != knn5_m[:, 1]))\n","\n","  print(\"KNN com k=5 e distância mahalonobis:\")\n","  print(\"Acurácia: \", acuracia_knn5_m)\n","  print(\"Revocação: \", revocacao_knn5_m)\n","  print(\"Precisão: \", precisao_knn5_m)\n","  print(\"F1 Score: \", f1_score_knn5_m)\n","  print(\"\\n\")\n","\n","  acuracia_arvore = np.sum(arvore[:, 0] == arvore[:, 1])/arvore.shape[0]\n","  revocacao_arvore = np.sum(arvore[arvore[:, 1] == 1, 0] == arvore[arvore[:, 1] == 1, 1])/arvore[arvore[:, 1] == 1].shape[0]\n","  precisao_arvore = np.sum(arvore[arvore[:, 0] == 1, 0] == arvore[arvore[:, 0] == 1, 1])/arvore[arvore[:, 0] == 1].shape[0]\n","  f1_score_arvore = 2*np.sum(arvore[arvore[:,1] == 1, 0] == arvore[arvore[:, 1] == 1, 1])/(2*np.sum(arvore[arvore[:,1] == 1, 0] == arvore[arvore[:, 1] == 1, 1]) + np.sum(arvore[:, 0] != arvore[:, 1]))\n","\n","  print(\"Árvore de Decisão:\")\n","  print(\"Acurácia: \", acuracia_arvore)\n","  print(\"Revocação: \", revocacao_arvore)\n","  print(\"Precisão: \", precisao_arvore)\n","  print(\"F1 Score: \", f1_score_arvore)\n","  print(\"\\n\")\n"],"metadata":{"id":"aHWvdX81S65L","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1683923418201,"user_tz":180,"elapsed":317,"user":{"displayName":"Bruna Maia","userId":"01303583052825153885"}},"outputId":"7c82d480-0062-4225-efef-140ed94497c5"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["Fold:  1\n","-------\n","KNN com k=1 e distância euclidiana:\n","Acurácia:  0.7272727272727273\n","Revocação:  0.75\n","Precisão:  0.75\n","F1 Score:  0.75\n","\n","\n","KNN com k=5 e distância euclidiana:\n","Acurácia:  0.7727272727272727\n","Revocação:  0.6666666666666666\n","Precisão:  0.8888888888888888\n","F1 Score:  0.7619047619047619\n","\n","\n","KNN com k=1 e distância mahalonobis:\n","Acurácia:  0.7272727272727273\n","Revocação:  0.5833333333333334\n","Precisão:  0.875\n","F1 Score:  0.7\n","\n","\n","KNN com k=5 e distância mahalonobis:\n","Acurácia:  0.6363636363636364\n","Revocação:  0.3333333333333333\n","Precisão:  1.0\n","F1 Score:  0.5\n","\n","\n","Árvore de Decisão:\n","Acurácia:  0.6818181818181818\n","Revocação:  0.5833333333333334\n","Precisão:  0.7777777777777778\n","F1 Score:  0.6666666666666666\n","\n","\n","Fold:  2\n","-------\n","KNN com k=1 e distância euclidiana:\n","Acurácia:  0.7727272727272727\n","Revocação:  0.8333333333333334\n","Precisão:  0.7692307692307693\n","F1 Score:  0.8\n","\n","\n","KNN com k=5 e distância euclidiana:\n","Acurácia:  0.8181818181818182\n","Revocação:  0.8333333333333334\n","Precisão:  0.8333333333333334\n","F1 Score:  0.8333333333333334\n","\n","\n","KNN com k=1 e distância mahalonobis:\n","Acurácia:  0.6363636363636364\n","Revocação:  0.6666666666666666\n","Precisão:  0.6666666666666666\n","F1 Score:  0.6666666666666666\n","\n","\n","KNN com k=5 e distância mahalonobis:\n","Acurácia:  0.7272727272727273\n","Revocação:  0.6666666666666666\n","Precisão:  0.8\n","F1 Score:  0.7272727272727273\n","\n","\n","Árvore de Decisão:\n","Acurácia:  0.7272727272727273\n","Revocação:  0.6666666666666666\n","Precisão:  0.8\n","F1 Score:  0.7272727272727273\n","\n","\n","Fold:  3\n","-------\n","KNN com k=1 e distância euclidiana:\n","Acurácia:  0.7272727272727273\n","Revocação:  0.8461538461538461\n","Precisão:  0.7333333333333333\n","F1 Score:  0.7857142857142857\n","\n","\n","KNN com k=5 e distância euclidiana:\n","Acurácia:  0.7272727272727273\n","Revocação:  0.6923076923076923\n","Precisão:  0.8181818181818182\n","F1 Score:  0.75\n","\n","\n","KNN com k=1 e distância mahalonobis:\n","Acurácia:  0.5454545454545454\n","Revocação:  0.5384615384615384\n","Precisão:  0.6363636363636364\n","F1 Score:  0.5833333333333334\n","\n","\n","KNN com k=5 e distância mahalonobis:\n","Acurácia:  0.6363636363636364\n","Revocação:  0.6923076923076923\n","Precisão:  0.6923076923076923\n","F1 Score:  0.6923076923076923\n","\n","\n","Árvore de Decisão:\n","Acurácia:  0.6818181818181818\n","Revocação:  0.7692307692307693\n","Precisão:  0.7142857142857143\n","F1 Score:  0.7407407407407407\n","\n","\n","Fold:  4\n","-------\n","KNN com k=1 e distância euclidiana:\n","Acurácia:  0.7272727272727273\n","Revocação:  0.7692307692307693\n","Precisão:  0.7692307692307693\n","F1 Score:  0.7692307692307693\n","\n","\n","KNN com k=5 e distância euclidiana:\n","Acurácia:  0.7727272727272727\n","Revocação:  0.6923076923076923\n","Precisão:  0.9\n","F1 Score:  0.782608695652174\n","\n","\n","KNN com k=1 e distância mahalonobis:\n","Acurácia:  0.8181818181818182\n","Revocação:  0.8461538461538461\n","Precisão:  0.8461538461538461\n","F1 Score:  0.8461538461538461\n","\n","\n","KNN com k=5 e distância mahalonobis:\n","Acurácia:  0.6363636363636364\n","Revocação:  0.46153846153846156\n","Precisão:  0.8571428571428571\n","F1 Score:  0.6\n","\n","\n","Árvore de Decisão:\n","Acurácia:  0.6818181818181818\n","Revocação:  0.5384615384615384\n","Precisão:  0.875\n","F1 Score:  0.6666666666666666\n","\n","\n","Fold:  5\n","-------\n","KNN com k=1 e distância euclidiana:\n","Acurácia:  0.8095238095238095\n","Revocação:  0.8181818181818182\n","Precisão:  0.8181818181818182\n","F1 Score:  0.8181818181818182\n","\n","\n","KNN com k=5 e distância euclidiana:\n","Acurácia:  0.8571428571428571\n","Revocação:  0.9090909090909091\n","Precisão:  0.8333333333333334\n","F1 Score:  0.8695652173913043\n","\n","\n","KNN com k=1 e distância mahalonobis:\n","Acurácia:  0.7142857142857143\n","Revocação:  0.7272727272727273\n","Precisão:  0.7272727272727273\n","F1 Score:  0.7272727272727273\n","\n","\n","KNN com k=5 e distância mahalonobis:\n","Acurácia:  0.8095238095238095\n","Revocação:  0.8181818181818182\n","Precisão:  0.8181818181818182\n","F1 Score:  0.8181818181818182\n","\n","\n","Árvore de Decisão:\n","Acurácia:  0.7619047619047619\n","Revocação:  0.8181818181818182\n","Precisão:  0.75\n","F1 Score:  0.782608695652174\n","\n","\n","Fold:  6\n","-------\n","KNN com k=1 e distância euclidiana:\n","Acurácia:  0.8571428571428571\n","Revocação:  0.7692307692307693\n","Precisão:  1.0\n","F1 Score:  0.8695652173913043\n","\n","\n","KNN com k=5 e distância euclidiana:\n","Acurácia:  0.9523809523809523\n","Revocação:  0.9230769230769231\n","Precisão:  1.0\n","F1 Score:  0.96\n","\n","\n","KNN com k=1 e distância mahalonobis:\n","Acurácia:  0.9047619047619048\n","Revocação:  0.8461538461538461\n","Precisão:  1.0\n","F1 Score:  0.9166666666666666\n","\n","\n","KNN com k=5 e distância mahalonobis:\n","Acurácia:  0.8095238095238095\n","Revocação:  0.7692307692307693\n","Precisão:  0.9090909090909091\n","F1 Score:  0.8333333333333334\n","\n","\n","Árvore de Decisão:\n","Acurácia:  0.8571428571428571\n","Revocação:  0.9230769230769231\n","Precisão:  0.8571428571428571\n","F1 Score:  0.8888888888888888\n","\n","\n","Fold:  7\n","-------\n","KNN com k=1 e distância euclidiana:\n","Acurácia:  0.8095238095238095\n","Revocação:  0.9\n","Precisão:  0.75\n","F1 Score:  0.8181818181818182\n","\n","\n","KNN com k=5 e distância euclidiana:\n","Acurácia:  0.6666666666666666\n","Revocação:  0.6\n","Precisão:  0.6666666666666666\n","F1 Score:  0.631578947368421\n","\n","\n","KNN com k=1 e distância mahalonobis:\n","Acurácia:  0.6190476190476191\n","Revocação:  0.6\n","Precisão:  0.6\n","F1 Score:  0.6\n","\n","\n","KNN com k=5 e distância mahalonobis:\n","Acurácia:  0.7142857142857143\n","Revocação:  0.4\n","Precisão:  1.0\n","F1 Score:  0.5714285714285714\n","\n","\n","Árvore de Decisão:\n","Acurácia:  0.7142857142857143\n","Revocação:  0.7\n","Precisão:  0.7\n","F1 Score:  0.7\n","\n","\n","Fold:  8\n","-------\n","KNN com k=1 e distância euclidiana:\n","Acurácia:  0.6190476190476191\n","Revocação:  1.0\n","Precisão:  0.3333333333333333\n","F1 Score:  0.5\n","\n","\n","KNN com k=5 e distância euclidiana:\n","Acurácia:  0.8571428571428571\n","Revocação:  1.0\n","Precisão:  0.5714285714285714\n","F1 Score:  0.7272727272727273\n","\n","\n","KNN com k=1 e distância mahalonobis:\n","Acurácia:  0.7142857142857143\n","Revocação:  1.0\n","Precisão:  0.4\n","F1 Score:  0.5714285714285714\n","\n","\n","KNN com k=5 e distância mahalonobis:\n","Acurácia:  0.7619047619047619\n","Revocação:  1.0\n","Precisão:  0.4444444444444444\n","F1 Score:  0.6153846153846154\n","\n","\n","Árvore de Decisão:\n","Acurácia:  0.6190476190476191\n","Revocação:  0.75\n","Precisão:  0.3\n","F1 Score:  0.42857142857142855\n","\n","\n","Fold:  9\n","-------\n","KNN com k=1 e distância euclidiana:\n","Acurácia:  0.5714285714285714\n","Revocação:  0.4444444444444444\n","Precisão:  0.5\n","F1 Score:  0.47058823529411764\n","\n","\n","KNN com k=5 e distância euclidiana:\n","Acurácia:  0.6666666666666666\n","Revocação:  0.5555555555555556\n","Precisão:  0.625\n","F1 Score:  0.5882352941176471\n","\n","\n","KNN com k=1 e distância mahalonobis:\n","Acurácia:  0.7142857142857143\n","Revocação:  0.5555555555555556\n","Precisão:  0.7142857142857143\n","F1 Score:  0.625\n","\n","\n","KNN com k=5 e distância mahalonobis:\n","Acurácia:  0.8095238095238095\n","Revocação:  0.5555555555555556\n","Precisão:  1.0\n","F1 Score:  0.7142857142857143\n","\n","\n","Árvore de Decisão:\n","Acurácia:  0.6666666666666666\n","Revocação:  0.6666666666666666\n","Precisão:  0.6\n","F1 Score:  0.631578947368421\n","\n","\n","Fold:  10\n","-------\n","KNN com k=1 e distância euclidiana:\n","Acurácia:  0.5238095238095238\n","Revocação:  0.5\n","Precisão:  0.5\n","F1 Score:  0.5\n","\n","\n","KNN com k=5 e distância euclidiana:\n","Acurácia:  0.7142857142857143\n","Revocação:  0.7\n","Precisão:  0.7\n","F1 Score:  0.7\n","\n","\n","KNN com k=1 e distância mahalonobis:\n","Acurácia:  0.42857142857142855\n","Revocação:  0.5\n","Precisão:  0.4166666666666667\n","F1 Score:  0.45454545454545453\n","\n","\n","KNN com k=5 e distância mahalonobis:\n","Acurácia:  0.7619047619047619\n","Revocação:  0.7\n","Precisão:  0.7777777777777778\n","F1 Score:  0.7368421052631579\n","\n","\n","Árvore de Decisão:\n","Acurácia:  0.6190476190476191\n","Revocação:  0.7\n","Precisão:  0.5833333333333334\n","F1 Score:  0.6363636363636364\n","\n","\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"SQ-q1l08qI03"},"execution_count":null,"outputs":[]}]}